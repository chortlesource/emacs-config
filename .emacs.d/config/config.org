
#+TITLE: Chortles Emacs Configuration File (LINUX EDN.)
#+AUTHOR: C. M. Short

* 1. About this document

This document is a verbose explanation of the configuration I utilise for emacs. Given the fact I so rarely tinker I'm liable to forget
what everything actually does. It is basically the result too much time spent procrastinating in the hopes of increasing productivity.

This document is processed by the org-babel package to generate a viable .el file for emacs to utilise in it's configuration.

It is not a perfect one file installation but as close as I can get it in the event my system fails and the painstaking configuration
changes I've added over time are lost.

It is laid out by function and grouped into appropriate headings ranging from default behaviours through to packages.

* 2. Installation

To install this configuration I would recommend removing the `.emacs`
file and `.emacs.d` directory from your home folder.

Then copy and past the contents of emacs-config directory to your home
folder and open emacs.

It's a bugy configuration for sure and usually results in anomalous
compile errors after installation but closing and reopening emacs until it resolves
appears to work.

Below can be found a series of bug fixes for this emacs configuration.

** 2.1 Bug fix: TLS 3.1 is Broken in Emacs 25.3

This is apparently fixed in Emacs 27, but to resolve here I add the
following code to fall back to TLS 1.3:

#+BEGIN_SRC emacs-lisp
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
#+END_SRC

** 2.2 Bug fix: ELPA keyring update

This fix resolves issues with the ELPA keyring and installs the
updated configuration.

#+BEGIN_SRC emacs-lisp
(when (not (package-installed-p 'gnu-elpa-keyring-update))
  (setq package-check-signature nil)
  (package-list-packages
  (package-refresh-contents)
  (package-install 'gnu-elpa-keyring-update)
  (setq package-check-signature 'allow-unsigned)))
#+END_SRC

** 2.3 Bug fix: use-package is not installed

This fix isn't so much a bug but just ensures that we use use-package
for installation for most of the stuff we are using

#+BEGIN_SRC emacs-lisp

(when (not (package-installed-p 'use-package))
  (package-refresh-contents)
  (package-install 'use-package))

(if (package-installed-p 'gnu-elpa-keyring-update)
  (use-package gnu-elpa-keyring-update :ensure t))
#+END_SRC

** 2.4 Bug fix: Magit can't commit

The order in which magit, magit-popup and transient are compiled can
be broken as such delete the following file if you cannot commit in
magit. This will be recompiled on load and /should/ then work.

"elpa/transient-VERISON/transient.elc"

* 3. Default Behaviours

The following are a series of changes to the default behaviours of
emacs which I find useful.

** 3.1. Buffer syncing
When there are changes made to a file, automatically refresh the buffer containing that file so they can't get out of sync.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

** 3.2. Start up message
Clear the scratch buffer and hide the startup message.

#+BEGIN_SRC emacs-lisp
(defun quiet-startup ()
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil))
(quiet-startup)
#+END_SRC

** 3.3. Optimise Garbage collection
Use 20MB of memory (instead of 0.76MB) before calling
garbage collection to optimise performance.

#+BEGIN_SRC emacs-lisp
(defun increase-gc-threshold ()
  (setq gc-cons-threshold 20000000))
(increase-gc-threshold)
#+END_SRC

** 3.4. Use sensible file sizes
Add file sizes in human-readable units (KB, MB, etc) to buffers.

#+BEGIN_SRC emacs-lisp
(defun fsizes-human-readable ()
  (setq-default dired-listing-switches "-alh"))
(fsizes-human-readable)
#+END_SRC

** 3.5. Use Y/N instead of YES/NO
 Don't ask `yes/no?', ask `y/n?' instead because it's more efficient

#+BEGIN_SRC emacs-lisp
(defun shorten-yes-no ()
  (fset 'yes-or-no-p 'y-or-n-p))
(shorten-yes-no)
#+END_SRC

** 3.6. Single space after full stop
IMHO it's akin to undefined behaviour to utilise double spacing after periods.

#+BEGIN_SRC emacs-lisp
(defun single-space-stop ()
  (setq sentence-end-double-space nil))
(single-space-stop)
#+END_SRC

** 3.7. Use a sensible fill-column width
Set the fill-column to at least 140.

#+BEGIN_SRC emacs-lisp
(add-hook 'clojure-mode-hook
          (lambda ()
            (set-fill-column 140)))
#+END_SRC

** 3.8. Syntax Highlighting
Turn on syntax highlighting whenever possible.

#+BEGIN_SRC emacs-lisp
(global-font-lock-mode t)
#+END_SRC

** 3.9. Delete trailing whitespaces
Call DELETE-TRAILING-WHITESPACE every time a buffer is saved.

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** 3.10. Handle Camel Case
Treat CamelCaseSubWords as separate words in every programming mode.

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'subword-mode)
#+END_SRC

** 3.11. Overwrite selected text
If some text is selected, and you type some text, delete the selected text and start inserting your typed text.

#+BEGIN_SRC emacs-lisp
(delete-selection-mode t)
#+END_SRC

** 3.12. Recursively make directories
When saving a file in a directory that doesn't exist, offer to (recursively) create the file's parent directories.

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook
    (lambda ()
      (when buffer-file-name
        (let ((dir (file-name-directory buffer-file-name)))
        (when (and (not (file-exists-p dir))
         (y-or-n-p (format "Directory %s does not exist. Create it?" dir)))
         (make-directory dir t))))))
#+END_SRC

** 3.13. End with newline
If you save a file that doesn't end with a newline, automatically append one.

#+BEGIN_SRC emacs-lisp
(defun end-with-newline ()
  (setq require-final-newline t))
(end-with-newline)
#+END_SRC

** 3.14. Auto-save linting
Because emacs auto-saves are useful but a pain in the ass for clutter
I employ the following settings.

#+BEGIN_SRC emacs-lisp
(defun auto-save-lint ()
  (setq backup-directory-alist `(("." . "~/.emacs.d/.saves")))
  (setq backup-by-copying t)
  (setq delete-old-versions t
    kept-new-versions 6
    kept-old-versions 2
    version-control t))
(auto-save-lint)
#+END_SRC

** 3.15. Org-mode Html CSS

To beatify the html css that shows use the following configuration
with orgmode

#+BEGIN_SRC emacs-lisp
(defun make-html-pretty-again ()
  (setq org-html-htmlize-output-type 'css))
(make-html-pretty-again)
#+END_SRC

** 3.16. Custom Key Bindings
Below are key bindings I've found useful to add

*** Turn off auto-fill-mode

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c q") 'auto-fill-mode)
#+END_SRC

*** Add SRC blocks quickly for convenience
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
(add-to-list 'org-structure-template-alist '("cpp" "#+BEGIN_SRC C++\n?\n#+END_SRC"))
(add-to-list 'org-structure-template-alist '("b" "#+BEGIN_SRC bash\n\n#+END_SRC"))
(global-set-key (kbd "C-c C-,") 'org-insert-structure-template)
#+END_SRC

*** Window split orientation

#+BEGIN_SRC emacs-lisp
(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
         (next-win-buffer (window-buffer (next-window)))
         (this-win-edges (window-edges (selected-window)))
         (next-win-edges (window-edges (next-window)))
         (this-win-2nd (not (and (<= (car this-win-edges)
                     (car next-win-edges))
                     (<= (cadr this-win-edges)
                     (cadr next-win-edges)))))
         (splitter
          (if (= (car this-win-edges)
             (car (window-edges (next-window))))
          'split-window-horizontally
        'split-window-vertically)))
    (delete-other-windows)
    (let ((first-win (selected-window)))
      (funcall splitter)
      (if this-win-2nd (other-window 1))
      (set-window-buffer (selected-window) this-win-buffer)
      (set-window-buffer (next-window) next-win-buffer)
      (select-window first-win)
      (if this-win-2nd (other-window 1))))))

(global-set-key (kbd "C-x |") 'toggle-window-split)
#+END_SRC

* 4. Display Preferences

Default emacs looks like the morning after a rough night out, and it doesn't have to be that way. As such the follow section covers mainly cosmetic changes that I have made
to the application

** 4.1 Fonts

Functions to handle the default font, and incrementing and
decrementing font sizes

#+BEGIN_SRC emacs-lisp
    (setq chortle/default-font "Cantarell")
    (setq chortle/default-font-size 12)
    (setq chortle/current-font-size chortle/default-font-size)
    (setq chortle/font-change-incr 1.1)

    (defun chortle/font-code ()
      (concat chortle/default-font "-" (number-to-string chortle/default-font-size)))

    (defun chortle/set-font-size ()
      (let ((font-code(chortle/font-code)))
        (add-to-list 'default-frame-alist (cons 'font font-code))
        (set-frame-font font-code)))

     (defun chortle/reset-font ()
       (interactive)
       (setq chortle/current-font-size chortle/default-font-size)
       (chortle/set-font-size))

     (defun chortle/increase-font-size ()
       (interactive)
       (setq chortle/current-font-size
             (ceiling (* chortle/current-font-size chortle/font-change-incr)))
       (chortle/set-font-size))

     (defun chortle/decrease-font-size ()
       (interactive)
       (setq chortle/current-font-size
             (max 1
          (floor (/ chortle/current-font-size chortle/font-change-incr))))
       (chortle/set-font-size))

  (define-key global-map (kbd "C-)") 'chortle/reset-font)
  (define-key global-map (kbd "C-+") 'chortle/increase-font-size)
  (define-key global-map (kbd "C-=") 'chortle/increase-font-size)
  (define-key global-map (kbd "C-_") 'chortle/decrease-font-size)
  (define-key global-map (kbd "C--") 'chortle/decrease-font-size)

  (chortle/reset-font)
#+END_SRC

** 4.2 Hide toolbar & menubar

Given I rarely use either this frees up some space I can use for documents

#+BEGIN_SRC emacs-lisp
  (if(display-graphic-p)
    (progn
      (tool-bar-mode 0)
      (menu-bar-mode -1)
      (scroll-bar-mode -1)))
  (set-window-scroll-bars (minibuffer-window) nil nil)
  (setq frame-title-format '((:eval (projectile-project-name))))
#+END_SRC

** 4.3 Other minor tweaks

Here are a few other bits I include because I can. I haven't really thought through how to organise them given they are basically tiny snippets

*** 4.4.1 Use pretty symbols

#+BEGIN_SRC emacs-lisp
(setq global-prettify-symbols-mode t)
#+END_SRC

*** 4.4.2 Don't recentre the buffer on mouse click

#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 100)
#+END_SRC

*** 4.4.3 Fontify natively in code blocks

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
#+END_SRC

*** Never use tabs

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

*** Maximise on start

Because this tiny emacs window opens by default.

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

** 4.4 Theme Selection

I will be using the manoj-dark theme for emacs and a daemon to ensure
that themes are applied continuously.

#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme              ; Default theme
    :ensure t
    :config (load-theme 'zenburn 'no-confirm)

    (let ((line (face-attribute 'mode-line :underline)))
      (set-face-attribute 'mode-line          nil :overline   line)
      (set-face-attribute 'mode-line-inactive nil :overline   line)
      (set-face-attribute 'mode-line-inactive nil :underline  line)
      (set-face-attribute 'mode-line          nil :box        nil)
      (set-face-attribute 'mode-line-inactive nil :box        nil)
      (set-face-attribute 'mode-line-inactive nil :background "#000000")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (if (daemonp)
      (add-hook 'after-make-frame-functions
          (lambda (frame)
              (select-frame frame)
              (load-theme 'zenburn t)))
      (load-theme 'zenburn t))
#+END_SRC

** 4.5 Custom Mode Line

A little handy feature that works really well thanks manu.el!

#+BEGIN_SRC emacs-lisp
  (line-number-mode)
  (column-number-mode)
    ;; Custom Eyebrowse mode-line indicator
    (defvar-local mu-eyebrowse-mode-line
      '(:propertize
        (:eval
         (when (bound-and-true-p eyebrowse-mode)
           (let* ((num (eyebrowse--get 'current-slot))
                  (tag (when num
                         (nth 2 (assoc num (eyebrowse--get 'window-configs)))))
                  (str (concat
                        " "
                        (if (and tag (< 0 (length tag)))
                            tag
                          (when num (int-to-string num)))
                        " ")))
             str))))
      "Mode line format for Eyebrowse.")

    (put 'mu-eyebrowse-mode-line 'risky-local-variable t)

    (setq-default mode-line-format
                  '("%e"
                    mu-eyebrowse-mode-line
                    mode-line-front-space
                    mode-line-mule-info
                    mode-line-client
                    mode-line-modified
                    mode-line-remote
                    mode-line-frame-identification
                    mode-line-buffer-identification " " mode-line-position
                    (vc-mode vc-mode)
                    (multiple-cursors-mode mc/mode-line)
                    " " mode-line-modes
    mode-line-end-spaces))
#+END_SRC

* 5. Packages

I use a variety of packages to manage certain elements of documents. These are installed by default using use-package

** 5.1 Use Package configuration

Configure use package so that I can get what I need.

#+BEGIN_SRC emacs-lisp
(setq use-package-always-ensure t)
(use-package auto-compile
  :config (auto-compile-on-load-mode))

(setq load-prefer-newer t)
#+END_SRC

** 5.2 Popup

#+BEGIN_SRC emacs-lisp
(use-package popup :ensure t)
#+END_SRC

** 5.3 Spell Checking

I use flycheck and fly spell for spelling. As frankly this is a must have for emacs and I need something to make sure that documents are somewhat coherent.

#+BEGIN_SRC emacs-lisp
(use-package let-alist :ensure t)
(use-package flycheck-package
  :ensure t)
(use-package flycheck
  :ensure t
  :init(global-flycheck-mode))
(eval-after-load 'flycheck
  '(flycheck-package-setup))

(use-package flyspell
  :config
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'gfm-mode-hook 'flyspell-mode)
  (add-hook 'org-mode-hook 'flyspell-mode)

  (add-hook 'git-commit-mode-hook 'flyspell-mode)
  (add-hook 'mu4e-compose-mode-hook 'flyspell-mode))
#+END_SRC

** 5.4 Thesaurus
Because I'm forever looking for "that word"

#+BEGIN_SRC emacs-lisp
(use-package synosaurus)
(setq-default synosaurus-backend 'synosaurus-backend-wordnet)
(add-hook 'after-init-hook #'synosaurus-mode)
(define-key global-map "\C-xs" 'synosaurus-lookup)
#+END_SRC

** 5.5 Magit

I like to use version tracking with the documents and software I
produce. Magit it a useful interface to manage.

#+BEGIN_SRC emacs-lisp
  (use-package transient)
  (use-package magit-popup)
  (use-package magit
    :bind
    ("C-x g" . magit-status)

    :config
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)

    (with-eval-after-load 'magit-remote
      (magit-define-popup-action 'magit-push-popup ?P
                                 'magit-push-implicitly--desc
                                 'magit-push-implicitly ?p t)))

  (use-package ghub)
#+END_SRC

** 5.6 Eyebrowse

To manage work spaces and keep my head clear I use eyebrowse which
employs C-c C-w # to open a new workspace and C-c C-w " to close.

#+BEGIN_SRC emacs-lisp
(use-package eyebrowse
  :ensure t
  :config
  (setq eyebrowse-mode-line-separator " " eyebrowse-new-workspace t)
  (eyebrowse-mode t))
#+END_SRC

** 5.7 Minions

Minions is a minior mode menu for the mode line for simplicity

#+BEGIN_SRC emacs-lisp
  (use-package minions
    :ensure t
    :init (minions-mode)
    :config
    (setq minions-mode-line-lighter ""
          minions-mode-line-delimiters '(" " . " "))
    (minions-mode 1))
#+END_SRC

** 5.8 Moody

Moody is a tab feature for the mode line and I like this look

#+BEGIN_SRC emacs-lisp
  (use-package moody
    :config
    (setq x-underline-at-descent-line t)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode))
#+END_SRC

** 5.9 Org Bullets

I prefer that the bullets as something more aesthetically pleasing and org-bullets is great for this.

#+BEGIN_SRC emacs-lisp
(use-package org-bullets :ensure t)
(add-hook 'org-mode-hook #'org-bullets-mode)
(setq org-startup-indented t)
(setq org-hide-leading-stars t)
#+END_SRC
